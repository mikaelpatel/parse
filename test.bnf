# $Id: test.bnf 5 2009-08-21 21:47:38Z Mikael Patel $
# ----------------------------------------------------------------------
# Name
#   test - test grammar for the top down parse machine
#  
# Description:	
#   Example of a C Programming Language integer expression syntax.
#   Demonstrates left-to-right ordering and priority.       
#
# Copyright (C) 1984-1994, 2013, Mikael Patel.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General
# Public License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA  02111-1307  USA
# ----------------------------------------------------------------------

!xbnf
<test> ::= <expr> <eoln> @ display
<expr> ::= <term10>
<term0> ::= <fact> <prio0?>
<prio0> ::= * <term0> @ multiply
 	 |  / <term0> @ divide
         |  % <term0> @ modulo
<term1> ::= <term0> <prio1*>
<prio1> ::= - <term0> @ subtract
         |  + <term0> @ addition
<term2> ::= <term1> <prio2*>
<prio2> ::= >> <term1> @ shift_right
         |  << <term1> @ shift_left
<term3> ::= <term2> <prio3*>
<prio3> ::= < <term2> @ less_than
 	 |  > <term2> @ greater_than
	 |  <= <term2> @ less_or_equal
	 |  >= <term2> @ greater_or_equal
<term4> ::= <term3> <prio4*>
<prio4> ::= == <term3> @ equal
		 |  != <term3> @ not_equal
<term5> ::= <term4> <prio5*>
<prio5> ::= & <term4> @ bitwise_and
<term6> ::= <term5> <prio6*>
<prio6> ::= ^ <term5> @ bitwise_xor
<term7> ::= <term6> <prio7*>
<prio7> ::= | <term6> @ bitwise_or
<term8> ::= <term7> <prio8*>
<prio8> ::= && <term7> @ logical_and
<term9> ::= <term8> <prio9*>
<prio9> ::= || <term8> @ logical_or
<term10> ::= <term9> <prio10*>
<prio10> ::= ? <expr> : <expr> @ condition
<fact> ::= ( <expr> )
	|  <identifier> = <expr> @ put
	|  <identifier> @ get
	|  <integer>
!bnf
